datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String?
  role          UserRole       @default(STUDENT)
  
  // Champs d'authentification
  password      String?        // Null pour les connexions sociales
  emailVerified DateTime?      // Date de vérification de l'email
  refreshToken  String?        // Token de rafraichissement
  lastLoginAt   DateTime?      // Dernière connexion
  lastLogoutAt  DateTime?      // Dernière déconnexion

  // Champs spécifiques aux experts
  bio           String?
  expertise     String[]
  hourlyRate    Float?
  experience    Int?
  timezone      String?        @default("UTC")
  bufferTime    Int?          @default(15)  // Minutes entre les sessions
  availability  Availability[]
  
  // Relations communes
  timeSlots     TimeSlot[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations pour les sessions
  expertSessions    Session[]  @relation("ExpertSessions")
  studentSessions   Session[]  @relation("StudentSessions")
  
  // Relations pour les demandes
  sentRequests     Request[]   @relation("UserRequests")
  receivedRequests Request[]   @relation("ExpertRequests")
  
  // Autres relations
  // Relations pour les revues
  reviewsGiven    Review[]  @relation("StudentReviews") // Avis donnés par l'étudiant
  reviewsReceived Review[]  @relation("ExpertReviews")  // Avis reçus en tant qu'expert
  payments        Payment[]
  notifications   Notification[]
  
}

model Request {
  id          String        @id @default(uuid())
  title       String
  description String
  objectives  String[]
  userId      String
  expertId    String
  status      RequestStatus @default(PENDING)
  category    String
  urgency     UrgencyLevel  @default(NORMAL)
  budget      Float?
  duration    Int?          // En minutes
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user        User          @relation("UserRequests", fields: [userId], references: [id])
  expert      User          @relation("ExpertRequests", fields: [expertId], references: [id])
  session     Session?

  @@index([userId])
  @@index([expertId])
}

model Session {
  id          String        @id @default(uuid())
  requestId   String?       @unique
  type        SessionType
  title       String
  description String?
  expertId    String
  studentId   String
  duration    Int           // En minutes
  startTime   DateTime
  endTime     DateTime
  status      SessionStatus @default(SCHEDULED)
  notes       String?
  recording   String?
  sessionData Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  expert      User          @relation("ExpertSessions", fields: [expertId], references: [id])
  student     User          @relation("StudentSessions", fields: [studentId], references: [id])
  request     Request?      @relation(fields: [requestId], references: [id])
  timeSlot    TimeSlot?
  payment     Payment?
  review      Review?
  whiteboard  Whiteboard?
  codeSession CodeSession?
  quiz        Quiz?

  @@index([expertId])
  @@index([studentId])
  @@index([type])
}

model Review {
  id          String    @id @default(uuid())
  sessionId   String    @unique
  studentId   String    // Renommé pour plus de clarté: l'étudiant qui laisse l'avis
  expertId    String    // L'expert qui reçoit l'avis
  rating      Int       // Note sur 5
  comment     String?
  createdAt   DateTime  @default(now())

  // Relations
  session     Session   @relation(fields: [sessionId], references: [id])
  student     User      @relation("StudentReviews", fields: [studentId], references: [id])
  expert      User      @relation("ExpertReviews", fields: [expertId], references: [id])


  @@index([studentId])
  @@index([expertId])
}

model TimeSlot {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      SlotStatus @default(AVAILABLE)
  sessionId   String?    @unique
  session     Session?   @relation(fields: [sessionId], references: [id])

  @@index([userId])
  @@index([startTime, endTime])
}

model Availability {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  dayOfWeek   Int       // 0-6 (Dimanche-Samedi)
  startTime   String    // Format "HH:mm"
  endTime     String    // Format "HH:mm"
  isRecurring Boolean   @default(true)

  @@index([userId])
  @@index([dayOfWeek])
}

model Payment {
  id             String        @id @default(uuid())
  sessionId      String        @unique
  amount         Float
  currency       String        @default("EUR")
  status         PaymentStatus @default(PENDING)
  paymentMethod  PaymentMethod
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user        User         @relation(fields: [userId], references: [id])
  session     Session      @relation(fields: [sessionId], references: [id])
  userId      String

  @@index([userId])
}

model Notification {
  id          String            @id @default(uuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean           @default(false)
  createdAt   DateTime          @default(now())

  // Relations
  user        User              @relation(fields: [userId], references: [id])

  @@index([userId])
}

model CodeSession {
  id          String   @id @default(uuid())
  sessionId   String   @unique
  language    String
  code        String
  output      String?
  files       Json[]
  session     Session  @relation(fields: [sessionId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Whiteboard {
  id          String   @id @default(uuid())
  sessionId   String   @unique
  session     Session  @relation(fields: [sessionId], references: [id])
  elements    Json[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id          String     @id @default(uuid())
  sessionId   String     @unique
  session     Session    @relation(fields: [sessionId], references: [id])
  timing      QuizTiming @default(END)
  customTime  Int?       // En minutes depuis le début (pour CUSTOM)
  milestones  Int[]      // Liste des minutes pour MILESTONE
  questions   Json[]
  responses   Json[]
  score       Float?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum UserRole {
  STUDENT
  EXPERT
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

enum SessionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SessionType {
  CODE
  DESIGN
  VIDEO_CALL
  QUIZ
  MIXED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CARD
  PAYPAL
  TRANSFER
}

enum NotificationType {
  REQUEST_RECEIVED
  REQUEST_ACCEPTED
  REQUEST_REJECTED
  SESSION_REMINDER
  SESSION_CANCELLED
  PAYMENT_RECEIVED
  REVIEW_RECEIVED
}

enum UrgencyLevel {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum QuizTiming {
  BEGIN
  MIDDLE
  END
  CUSTOM
  PERIODIC_15
  PERIODIC_30
  PERIODIC_60
  MILESTONE
}

enum SlotStatus {
  AVAILABLE
  TENTATIVE
  BOOKED
  CANCELLED
  COMPLETED
}